{"version":3,"sources":["components/home.js","components/projects.js","App.js","serviceWorker.js","index.js"],"names":["greetings","greeting","Math","floor","random","length","Home","react_default","a","createElement","lib","className","col","href","rel","target","src","alt","Component","Projects","App","home","projects","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iPAGIA,EAAY,CAAC,QAAS,QAAS,QAAS,aAAc,aAAc,iBAAkB,SAAU,UAAW,OAAQ,aAAc,iBAAkB,WAAY,gBAAiB,UAAW,WAAY,mBAAc,cAAY,cAAe,YAAa,MAAO,OAAQ,MAAO,QAAS,UAAW,WAAY,YAAa,SAAU,WAAY,WAAS,QAAS,UAAW,kBAAS,SAAO,QAAS,eAAgB,SAAU,OAAQ,MAAO,SAAU,8BAAqB,SAAU,WAAS,UAAW,SAClfC,EAAWD,EAAUE,KAAKC,MAAMD,KAAKE,SAASJ,EAAUK,SAsD7CC,mLAlDX,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACC,EAAA,KAAD,CAAMC,UAAU,aACdJ,EAAAC,EAAAC,cAACC,EAAA,KAAD,CAAME,IAAK,IACTL,EAAAC,EAAAC,cAAA,OAAKE,UAAU,WACbJ,EAAAC,EAAAC,cAAA,YAEFF,EAAAC,EAAAC,cAAA,OAAKE,UAAU,eACbJ,EAAAC,EAAAC,cAAA,UAAKR,EAAL,mBACAM,EAAAC,EAAAC,cAAA,iDAEEF,EAAAC,EAAAC,cAAA,WAFF,yBAKAF,EAAAC,EAAAC,cAAA,YAGFF,EAAAC,EAAAC,cAAA,OAAKE,UAAU,gBAEbJ,EAAAC,EAAAC,cAAA,KAAGI,KAAK,qCAAqCC,IAAI,sBAAsBC,OAAO,UAC5ER,EAAAC,EAAAC,cAAA,OAAKO,IAAI,uBAAuBC,IAAI,SAASN,UAAU,iBAIzDJ,EAAAC,EAAAC,cAAA,KAAGI,KAAK,0BAA0BC,IAAI,sBAAsBC,OAAO,UACjER,EAAAC,EAAAC,cAAA,OAAKO,IAAI,yBAAyBC,IAAI,WAAWN,UAAU,iBAI7DJ,EAAAC,EAAAC,cAAA,KAAGI,KAAK,+BAA+BC,IAAI,sBAAsBC,OAAO,UACtER,EAAAC,EAAAC,cAAA,OAAKO,IAAI,uBAAuBC,IAAI,SAASN,UAAU,iBAIzDJ,EAAAC,EAAAC,cAAA,KAAGI,KAAK,wCAAwCC,IAAI,sBAAsBC,OAAO,UAC/ER,EAAAC,EAAAC,cAAA,OAAKO,IAAI,yBAAyBC,IAAI,WAAWN,UAAU,iBAI7DJ,EAAAC,EAAAC,cAAA,KAAGI,KAAK,+BAA+BC,IAAI,sBAAsBC,OAAO,UACtER,EAAAC,EAAAC,cAAA,OAAKO,IAAI,sBAAsBC,IAAI,QAAQN,UAAU,4BA1ClDO,aCQJC,mLAVX,OACEZ,EAAAC,EAAAC,cAAA,8BAHiBS,aCkBRE,mLAXX,OACEb,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OAEbJ,EAAAC,EAAAC,cAACY,EAAD,MACAd,EAAAC,EAAAC,cAACa,EAAD,cANUJ,aCKEK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,uECXNC,IAASC,OAAOtB,EAAAC,EAAAC,cAACqB,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.90069dd4.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Grid, Cell } from 'react-mdl';\r\n\r\nvar greetings = ['Hello', 'Hallo', 'Jambo', 'Barev dzez', 'Mingalarba', 'Chum reap suor', 'Ni hao', 'Namaste', 'Halo', 'Konnichiwa', 'Annyeonghaseyo', 'Sabaidee', 'Sain baina uu', 'Kumusta', 'Vanakkam', 'Sà-wàt-dee', 'Xin chào', 'Tungjatjeta', 'Zdravejte', 'Bok', 'Ahoj', 'Hej', 'Terve', 'Bonjour', 'Dia duit', 'Guten tag', 'Yasass', 'Szervusz', 'Halló', 'Salve', 'God dag', 'Cześć', 'Olá', 'Salut', 'Zdravstvuyte', 'Zdravo', 'Hola', 'Hej', 'Vitayu', 'As-salām ‘alaykum', 'Shalom', 'Salâm', 'Merhaba', 'Aloha'];\r\nvar greeting = greetings[Math.floor(Math.random()*greetings.length)];\r\n\r\nclass Home extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Grid className='home-grid'>\r\n          <Cell col={12}>\r\n            <div className='breaker'>\r\n              <br></br>\r\n            </div>\r\n            <div className=\"banner-text\">\r\n              <h1>{greeting}! I'm Ian Yang!</h1>\r\n              <p>\r\n                Computer Science & Statistics Student\r\n                <br></br>\r\n                University of Toronto\r\n              </p>\r\n              <hr/>\r\n            </div>\r\n\r\n            <div className=\"social-links\">\r\n              {/* Resume */}\r\n              <a href='../resources/Resume (Ian Yang).pdf' rel=\"noopener noreferrer\" target=\"_blank\">\r\n                <img src='../images/resume.svg' alt=\"Resume\" className=\"social-icon\"/>\r\n              </a>\r\n\r\n              {/* Projects */}\r\n              <a href='https://www.google.com/' rel=\"noopener noreferrer\" target=\"_blank\">\r\n                <img src='../images/projects.svg' alt=\"Projects\" className=\"social-icon\"/>\r\n              </a>\r\n\r\n              {/* GitHub */}\r\n              <a href='https://github.com/ianyyang/' rel=\"noopener noreferrer\" target=\"_blank\">\r\n                <img src='../images/github.svg' alt=\"GitHub\" className=\"social-icon\"/>\r\n              </a>\r\n\r\n              {/* LinkedIn */}\r\n              <a href='https://www.linkedin.com/in/ianyyang/' rel=\"noopener noreferrer\" target=\"_blank\">\r\n                <img src='../images/linkedin.svg' alt=\"LinkedIn\" className=\"social-icon\"/>\r\n              </a>\r\n\r\n              {/* Email */}\r\n              <a href='mailto:iany.yang.utoronto.ca' rel=\"noopener noreferrer\" target=\"_blank\">\r\n                <img src='../images/email.svg' alt=\"Email\" className=\"social-icon\"/>\r\n              </a>\r\n            </div>\r\n          </Cell>\r\n        </Grid>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Home;","import React, { Component } from 'react';\r\n\r\nclass Projects extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n\r\n          Projects\r\n          \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Projects;","import React, { Component } from 'react';\nimport './App.css';\n\n// Components\nimport Home from './components/home'\nimport Projects from './components/projects'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n\n        <Home />\n        <Projects/>\n\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'react-mdl/extra/material.css';\nimport 'react-mdl/extra/material.js';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}